{"version":3,"sources":["../../../src/export/persistMetroAssets.ts"],"sourcesContent":["/**\n * Copyright Â© 2023 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on the community asset persisting for Metro but with base path and web support:\n * https://github.com/facebook/react-native/blob/d6e0bc714ad4d215ede4949d3c4f44af6dea5dd3/packages/community-cli-plugin/src/commands/bundle/saveAssets.js#L1\n */\nimport fs from 'fs';\nimport type { AssetData } from 'metro';\nimport path from 'path';\n\nimport { getAssetLocalPath } from './metroAssetLocalPath';\nimport { ExportAssetMap } from './saveAssets';\nimport { Log } from '../log';\n\nfunction cleanAssetCatalog(catalogDir: string): void {\n  const files = fs.readdirSync(catalogDir).filter((file) => file.endsWith('.imageset'));\n  for (const file of files) {\n    fs.rmSync(path.join(catalogDir, file));\n  }\n}\n\nexport async function persistMetroAssetsAsync(\n  projectRoot: string,\n  assets: readonly AssetData[],\n  {\n    platform,\n    outputDirectory,\n    baseUrl,\n    iosAssetCatalogDirectory,\n    files,\n  }: {\n    platform: string;\n    outputDirectory: string;\n    baseUrl?: string;\n    iosAssetCatalogDirectory?: string;\n    files?: ExportAssetMap;\n  }\n) {\n  if (outputDirectory == null) {\n    Log.warn('Assets destination folder is not set, skipping...');\n    return;\n  }\n\n  // For iOS, we need to ensure that the outputDirectory exists.\n  // The bundle code and images build phase script always tries to access this folder\n  if (platform === 'ios' && !fs.existsSync(outputDirectory)) {\n    fs.mkdirSync(outputDirectory, { recursive: true });\n  }\n\n  let assetsToCopy: AssetData[] = [];\n\n  // TODO: Use `files` as below to defer writing files\n  if (platform === 'ios' && iosAssetCatalogDirectory != null) {\n    // Use iOS Asset Catalog for images. This will allow Apple app thinning to\n    // remove unused scales from the optimized bundle.\n    const catalogDir = path.join(iosAssetCatalogDirectory, 'RNAssets.xcassets');\n    if (!fs.existsSync(catalogDir)) {\n      Log.error(\n        `Could not find asset catalog 'RNAssets.xcassets' in ${iosAssetCatalogDirectory}. Make sure to create it if it does not exist.`\n      );\n      return;\n    }\n\n    Log.log('Adding images to asset catalog', catalogDir);\n    cleanAssetCatalog(catalogDir);\n    for (const asset of assets) {\n      if (isCatalogAsset(asset)) {\n        const imageSet = getImageSet(\n          catalogDir,\n          asset,\n          filterPlatformAssetScales(platform, asset.scales)\n        );\n        writeImageSet(imageSet);\n      } else {\n        assetsToCopy.push(asset);\n      }\n    }\n    Log.log('Done adding images to asset catalog');\n  } else {\n    assetsToCopy = [...assets];\n  }\n\n  const batches: Record<string, string> = {};\n\n  for (const asset of assetsToCopy) {\n    const validScales = new Set(filterPlatformAssetScales(platform, asset.scales));\n    for (let idx = 0; idx < asset.scales.length; idx++) {\n      const scale = asset.scales[idx];\n      if (validScales.has(scale)) {\n        const src = asset.files[idx];\n        const dest = getAssetLocalPath(asset, { platform, scale, baseUrl });\n        if (files) {\n          const data = await fs.promises.readFile(src);\n          files.set(dest, {\n            contents: data,\n            assetId: getAssetIdForLogGrouping(projectRoot, asset),\n            targetDomain: platform === 'web' ? 'client' : undefined,\n          });\n        } else {\n          batches[src] = path.join(outputDirectory, dest);\n        }\n      }\n    }\n  }\n\n  if (!files) {\n    await copyInBatchesAsync(batches);\n  }\n}\n\nexport function getAssetIdForLogGrouping(\n  projectRoot: string,\n  asset: Partial<Pick<AssetData, 'fileSystemLocation' | 'name' | 'type'>>\n): string | undefined {\n  return 'fileSystemLocation' in asset && asset.fileSystemLocation != null && asset.name != null\n    ? path.relative(projectRoot, path.join(asset.fileSystemLocation, asset.name)) +\n        (asset.type ? '.' + asset.type : '')\n    : undefined;\n}\n\nfunction writeImageSet(imageSet: ImageSet): void {\n  fs.mkdirSync(imageSet.baseUrl, { recursive: true });\n\n  for (const file of imageSet.files) {\n    const dest = path.join(imageSet.baseUrl, file.name);\n    fs.copyFileSync(file.src, dest);\n  }\n\n  fs.writeFileSync(\n    path.join(imageSet.baseUrl, 'Contents.json'),\n    JSON.stringify({\n      images: imageSet.files.map((file) => ({\n        filename: file.name,\n        idiom: 'universal',\n        scale: `${file.scale}x`,\n      })),\n      info: {\n        author: 'expo',\n        version: 1,\n      },\n    })\n  );\n}\n\nfunction isCatalogAsset(asset: Pick<AssetData, 'type'>): boolean {\n  return asset.type === 'png' || asset.type === 'jpg' || asset.type === 'jpeg';\n}\n\ntype ImageSet = {\n  baseUrl: string;\n  files: { name: string; src: string; scale: number }[];\n};\n\nfunction getImageSet(\n  catalogDir: string,\n  asset: Pick<AssetData, 'httpServerLocation' | 'name' | 'type' | 'files'>,\n  scales: number[]\n): ImageSet {\n  const fileName = getResourceIdentifier(asset);\n  return {\n    baseUrl: path.join(catalogDir, `${fileName}.imageset`),\n    files: scales.map((scale, idx) => {\n      const suffix = scale === 1 ? '' : `@${scale}x`;\n      return {\n        name: `${fileName + suffix}.${asset.type}`,\n        scale,\n        src: asset.files[idx],\n      };\n    }),\n  };\n}\n\nexport function copyInBatchesAsync(filesToCopy: Record<string, string>) {\n  const queue = Object.keys(filesToCopy);\n  if (queue.length === 0) {\n    return;\n  }\n\n  Log.log(`Copying ${queue.length} asset files`);\n  return new Promise<void>((resolve, reject) => {\n    const copyNext = (error?: NodeJS.ErrnoException) => {\n      if (error) {\n        return reject(error);\n      }\n      if (queue.length) {\n        // queue.length === 0 is checked in previous branch, so this is string\n        const src = queue.shift() as string;\n        const dest = filesToCopy[src];\n        copy(src, dest, copyNext);\n      } else {\n        resolve();\n      }\n    };\n    copyNext();\n  });\n}\n\nfunction copy(src: string, dest: string, callback: (error: NodeJS.ErrnoException) => void): void {\n  fs.mkdir(path.dirname(dest), { recursive: true }, (err?) => {\n    if (err) {\n      callback(err);\n      return;\n    }\n    fs.createReadStream(src).pipe(fs.createWriteStream(dest)).on('finish', callback);\n  });\n}\n\nconst ALLOWED_SCALES: { [key: string]: number[] } = {\n  ios: [1, 2, 3],\n};\n\nexport function filterPlatformAssetScales(platform: string, scales: number[]): number[] {\n  const whitelist: number[] = ALLOWED_SCALES[platform];\n  if (!whitelist) {\n    return scales;\n  }\n  const result = scales.filter((scale) => whitelist.includes(scale));\n  if (!result.length && scales.length) {\n    // No matching scale found, but there are some available. Ideally we don't\n    // want to be in this situation and should throw, but for now as a fallback\n    // let's just use the closest larger image\n    const maxScale = whitelist[whitelist.length - 1];\n    for (const scale of scales) {\n      if (scale > maxScale) {\n        result.push(scale);\n        break;\n      }\n    }\n\n    // There is no larger scales available, use the largest we have\n    if (!result.length) {\n      result.push(scales[scales.length - 1]);\n    }\n  }\n  return result;\n}\n\nfunction getResourceIdentifier(asset: Pick<AssetData, 'httpServerLocation' | 'name'>): string {\n  const folderPath = getBaseUrl(asset);\n  return `${folderPath}/${asset.name}`\n    .toLowerCase()\n    .replace(/\\//g, '_') // Encode folder structure in file name\n    .replace(/([^a-z0-9_])/g, '') // Remove illegal chars\n    .replace(/^assets_/, ''); // Remove \"assets_\" prefix\n}\n\nfunction getBaseUrl(asset: Pick<AssetData, 'httpServerLocation'>): string {\n  let baseUrl = asset.httpServerLocation;\n  if (baseUrl[0] === '/') {\n    baseUrl = baseUrl.substring(1);\n  }\n  return baseUrl;\n}\n"],"names":["persistMetroAssetsAsync","getAssetIdForLogGrouping","copyInBatchesAsync","filterPlatformAssetScales","cleanAssetCatalog","catalogDir","files","fs","readdirSync","filter","file","endsWith","rmSync","path","join","projectRoot","assets","platform","outputDirectory","baseUrl","iosAssetCatalogDirectory","Log","warn","existsSync","mkdirSync","recursive","assetsToCopy","error","log","asset","isCatalogAsset","imageSet","getImageSet","scales","writeImageSet","push","batches","validScales","Set","idx","length","scale","has","src","dest","getAssetLocalPath","data","promises","readFile","set","contents","assetId","targetDomain","undefined","fileSystemLocation","name","relative","type","copyFileSync","writeFileSync","JSON","stringify","images","map","filename","idiom","info","author","version","fileName","getResourceIdentifier","suffix","filesToCopy","queue","Object","keys","Promise","resolve","reject","copyNext","shift","copy","callback","mkdir","dirname","err","createReadStream","pipe","createWriteStream","on","ALLOWED_SCALES","ios","whitelist","result","includes","maxScale","folderPath","getBaseUrl","toLowerCase","replace","httpServerLocation","substring"],"mappings":"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"}