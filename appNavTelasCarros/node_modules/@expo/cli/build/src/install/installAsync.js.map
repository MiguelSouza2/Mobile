{"version":3,"sources":["../../../src/install/installAsync.ts"],"sourcesContent":["import { getConfig, getPackageJson } from '@expo/config';\nimport * as PackageManager from '@expo/package-manager';\nimport chalk from 'chalk';\n\nimport { applyPluginsAsync } from './applyPlugins';\nimport { checkPackagesAsync } from './checkPackages';\nimport { installExpoPackageAsync } from './installExpoPackage';\nimport { Options } from './resolveOptions';\nimport * as Log from '../log';\nimport { checkPackagesCompatibility } from './utils/checkPackagesCompatibility';\nimport { getVersionedPackagesAsync } from '../start/doctor/dependencies/getVersionedPackages';\nimport { env } from '../utils/env';\nimport { CommandError } from '../utils/errors';\nimport { findUpProjectRootOrAssert } from '../utils/findUp';\nimport { learnMore } from '../utils/link';\nimport { setNodeEnv } from '../utils/nodeEnv';\nimport { joinWithCommasAnd } from '../utils/strings';\n\n/**\n * Installs versions of specified packages compatible with the current Expo SDK version, or\n * checks/ fixes dependencies in project if they don't match compatible versions specified in bundledNativeModules or versions endpoints.\n *\n * @param packages list of packages to install, if installing specific packages and not checking/ fixing\n * @param options options, including check or fix\n * @param packageManagerArguments arguments to forward to the package manager invoked while installing\n * @returns Promise<void>\n */\nexport async function installAsync(\n  packages: string[],\n  options: Options & { projectRoot?: string },\n  packageManagerArguments: string[] = []\n) {\n  setNodeEnv('development');\n  // Locate the project root based on the process current working directory.\n  // This enables users to run `npx expo install` from a subdirectory of the project.\n  const projectRoot = options?.projectRoot ?? findUpProjectRootOrAssert(process.cwd());\n  require('@expo/env').load(projectRoot);\n\n  // Resolve the package manager used by the project, or based on the provided arguments.\n  const packageManager = PackageManager.createForProject(projectRoot, {\n    npm: options.npm,\n    yarn: options.yarn,\n    bun: options.bun,\n    pnpm: options.pnpm,\n    silent: options.silent,\n    log: Log.log,\n  });\n\n  const expoVersion = findPackageByName(packages, 'expo');\n  const otherPackages = packages.filter((pkg) => pkg !== expoVersion);\n\n  // Abort early when installing `expo@<version>` and other packages with `--fix/--check`\n  if (packageHasVersion(expoVersion) && otherPackages.length && (options.check || options.fix)) {\n    throw new CommandError(\n      'BAD_ARGS',\n      `Cannot install other packages with ${expoVersion} and --fix or --check`\n    );\n  }\n\n  // Only check/fix packages if `expo@<version>` is not requested\n  if (!packageHasVersion(expoVersion) && (options.check || options.fix)) {\n    return await checkPackagesAsync(projectRoot, {\n      packages,\n      options,\n      packageManager,\n      packageManagerArguments,\n    });\n  }\n\n  // note(simek): check out the packages compatibility with New Architecture against RND API\n  if (!env.EXPO_NO_DEPENDENCY_VALIDATION && !env.EXPO_NO_NEW_ARCH_COMPAT_CHECK) {\n    await checkPackagesCompatibility(otherPackages);\n  }\n\n  // Read the project Expo config without plugins.\n  const { exp } = getConfig(projectRoot, {\n    // Sometimes users will add a plugin to the config before installing the library,\n    // this wouldn't work unless we dangerously disable plugin serialization.\n    skipPlugins: true,\n  });\n\n  // Resolve the versioned packages, then install them.\n  return installPackagesAsync(projectRoot, {\n    ...options,\n    packageManager,\n    packages,\n    packageManagerArguments,\n    sdkVersion: exp.sdkVersion!,\n  });\n}\n\n/** Version packages and install in a project. */\nexport async function installPackagesAsync(\n  projectRoot: string,\n  {\n    packages,\n    packageManager,\n    sdkVersion,\n    packageManagerArguments,\n    fix,\n    check,\n    dev,\n  }: Options & {\n    /**\n     * List of packages to version, grouped by the type of dependency.\n     * @example ['uuid', 'react-native-reanimated@latest']\n     */\n    packages: string[];\n    /** Package manager to use when installing the versioned packages. */\n    packageManager: PackageManager.NodePackageManager;\n    /**\n     * SDK to version `packages` for.\n     * @example '44.0.0'\n     */\n    sdkVersion: string;\n    /**\n     * Extra parameters to pass to the `packageManager` when installing versioned packages.\n     * @example ['--no-save']\n     */\n    packageManagerArguments: string[];\n  }\n): Promise<void> {\n  // Read the project Expo config without plugins.\n  const pkg = getPackageJson(projectRoot);\n\n  //assertNotInstallingExcludedPackages(projectRoot, packages, pkg);\n\n  const versioning = await getVersionedPackagesAsync(projectRoot, {\n    packages,\n    // sdkVersion is always defined because we don't skipSDKVersionRequirement in getConfig.\n    sdkVersion,\n    pkg,\n  });\n\n  Log.log(\n    chalk`\\u203A Installing ${\n      versioning.messages.length ? versioning.messages.join(' and ') + ' ' : ''\n    }using {bold ${packageManager.name}}`\n  );\n\n  if (versioning.excludedNativeModules.length) {\n    const alreadyExcluded = versioning.excludedNativeModules.filter(\n      (module) => module.isExcludedFromValidation\n    );\n    const specifiedExactVersion = versioning.excludedNativeModules.filter(\n      (module) => !module.isExcludedFromValidation\n    );\n\n    if (alreadyExcluded.length) {\n      Log.log(\n        chalk`\\u203A Using ${joinWithCommasAnd(\n          alreadyExcluded.map(\n            ({ bundledNativeVersion, name, specifiedVersion }) =>\n              `${specifiedVersion || 'latest'} instead of  ${bundledNativeVersion} for ${name}`\n          )\n        )} because ${\n          alreadyExcluded.length > 1 ? 'they are' : 'it is'\n        } listed in {bold expo.install.exclude} in package.json. ${learnMore(\n          'https://docs.expo.dev/more/expo-cli/#configuring-dependency-validation'\n        )}`\n      );\n    }\n\n    if (specifiedExactVersion.length) {\n      Log.log(\n        chalk`\\u203A Using ${joinWithCommasAnd(\n          specifiedExactVersion.map(\n            ({ bundledNativeVersion, name, specifiedVersion }) =>\n              `${specifiedVersion} instead of ${bundledNativeVersion} for ${name}`\n          )\n        )} because ${\n          specifiedExactVersion.length > 1 ? 'these versions' : 'this version'\n        } was explicitly provided. Packages excluded from dependency validation should be listed in {bold expo.install.exclude} in package.json. ${learnMore(\n          'https://docs.expo.dev/more/expo-cli/#configuring-dependency-validation'\n        )}`\n      );\n    }\n  }\n\n  // `expo` needs to be installed before installing other packages\n  const expoPackage = findPackageByName(packages, 'expo');\n  if (expoPackage) {\n    const postInstallCommand = packages.filter((pkg) => pkg !== expoPackage);\n\n    // Pipe options to the next command\n    if (fix) postInstallCommand.push('--fix');\n    if (check) postInstallCommand.push('--check');\n\n    // Abort after installing `expo`, follow up command is spawn in a new process\n    return await installExpoPackageAsync(projectRoot, {\n      packageManager,\n      packageManagerArguments,\n      expoPackageToInstall: versioning.packages.find((pkg) => pkg.startsWith('expo@'))!,\n      followUpCommandArgs: postInstallCommand,\n    });\n  }\n\n  if (dev) {\n    await packageManager.addDevAsync([...packageManagerArguments, ...versioning.packages]);\n  } else {\n    await packageManager.addAsync([...packageManagerArguments, ...versioning.packages]);\n  }\n\n  await applyPluginsAsync(projectRoot, versioning.packages);\n}\n\n/** Find a package, by name, in the requested packages list (`expo` -> `expo`/`expo@<version>`) */\nfunction findPackageByName(packages: string[], name: string) {\n  return packages.find((pkg) => pkg === name || pkg.startsWith(`${name}@`));\n}\n\n/** Determine if a specific version is requested for a package */\nfunction packageHasVersion(name = '') {\n  return name.includes('@');\n}\n"],"names":["installAsync","installPackagesAsync","packages","options","packageManagerArguments","setNodeEnv","projectRoot","findUpProjectRootOrAssert","process","cwd","require","load","packageManager","PackageManager","createForProject","npm","yarn","bun","pnpm","silent","log","Log","expoVersion","findPackageByName","otherPackages","filter","pkg","packageHasVersion","length","check","fix","CommandError","checkPackagesAsync","env","EXPO_NO_DEPENDENCY_VALIDATION","EXPO_NO_NEW_ARCH_COMPAT_CHECK","checkPackagesCompatibility","exp","getConfig","skipPlugins","sdkVersion","dev","getPackageJson","versioning","getVersionedPackagesAsync","chalk","messages","join","name","excludedNativeModules","alreadyExcluded","module","isExcludedFromValidation","specifiedExactVersion","joinWithCommasAnd","map","bundledNativeVersion","specifiedVersion","learnMore","expoPackage","postInstallCommand","push","installExpoPackageAsync","expoPackageToInstall","find","startsWith","followUpCommandArgs","addDevAsync","addAsync","applyPluginsAsync","includes"],"mappings":"AAAA;;;;;;;;;;;IA2BsBA,YAAY,MAAZA,YAAY;IAiEZC,oBAAoB,MAApBA,oBAAoB;;;yBA5FA,cAAc;;;;;;;+DACxB,uBAAuB;;;;;;;8DACrC,OAAO;;;;;;8BAES,gBAAgB;+BACf,iBAAiB;oCACZ,sBAAsB;2DAEzC,QAAQ;4CACc,oCAAoC;sCACrC,mDAAmD;qBACzE,cAAc;wBACL,iBAAiB;wBACJ,iBAAiB;sBACjC,eAAe;yBACd,kBAAkB;yBACX,kBAAkB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAW7C,eAAeD,YAAY,CAChCE,QAAkB,EAClBC,OAA2C,EAC3CC,uBAAiC,GAAG,EAAE,EACtC;IACAC,IAAAA,QAAU,WAAA,EAAC,aAAa,CAAC,CAAC;IAC1B,0EAA0E;IAC1E,mFAAmF;IACnF,MAAMC,WAAW,GAAGH,CAAAA,OAAO,QAAa,GAApBA,KAAAA,CAAoB,GAApBA,OAAO,CAAEG,WAAW,CAAA,IAAIC,IAAAA,OAAyB,0BAAA,EAACC,OAAO,CAACC,GAAG,EAAE,CAAC,AAAC;IACrFC,OAAO,CAAC,WAAW,CAAC,CAACC,IAAI,CAACL,WAAW,CAAC,CAAC;IAEvC,uFAAuF;IACvF,MAAMM,cAAc,GAAGC,eAAc,EAAA,CAACC,gBAAgB,CAACR,WAAW,EAAE;QAClES,GAAG,EAAEZ,OAAO,CAACY,GAAG;QAChBC,IAAI,EAAEb,OAAO,CAACa,IAAI;QAClBC,GAAG,EAAEd,OAAO,CAACc,GAAG;QAChBC,IAAI,EAAEf,OAAO,CAACe,IAAI;QAClBC,MAAM,EAAEhB,OAAO,CAACgB,MAAM;QACtBC,GAAG,EAAEC,IAAG,CAACD,GAAG;KACb,CAAC,AAAC;IAEH,MAAME,WAAW,GAAGC,iBAAiB,CAACrB,QAAQ,EAAE,MAAM,CAAC,AAAC;IACxD,MAAMsB,aAAa,GAAGtB,QAAQ,CAACuB,MAAM,CAAC,CAACC,GAAG,GAAKA,GAAG,KAAKJ,WAAW,CAAC,AAAC;IAEpE,uFAAuF;IACvF,IAAIK,iBAAiB,CAACL,WAAW,CAAC,IAAIE,aAAa,CAACI,MAAM,IAAI,CAACzB,OAAO,CAAC0B,KAAK,IAAI1B,OAAO,CAAC2B,GAAG,CAAC,EAAE;QAC5F,MAAM,IAAIC,OAAY,aAAA,CACpB,UAAU,EACV,CAAC,mCAAmC,EAAET,WAAW,CAAC,qBAAqB,CAAC,CACzE,CAAC;IACJ,CAAC;IAED,+DAA+D;IAC/D,IAAI,CAACK,iBAAiB,CAACL,WAAW,CAAC,IAAI,CAACnB,OAAO,CAAC0B,KAAK,IAAI1B,OAAO,CAAC2B,GAAG,CAAC,EAAE;QACrE,OAAO,MAAME,IAAAA,cAAkB,mBAAA,EAAC1B,WAAW,EAAE;YAC3CJ,QAAQ;YACRC,OAAO;YACPS,cAAc;YACdR,uBAAuB;SACxB,CAAC,CAAC;IACL,CAAC;IAED,0FAA0F;IAC1F,IAAI,CAAC6B,IAAG,IAAA,CAACC,6BAA6B,IAAI,CAACD,IAAG,IAAA,CAACE,6BAA6B,EAAE;QAC5E,MAAMC,IAAAA,2BAA0B,2BAAA,EAACZ,aAAa,CAAC,CAAC;IAClD,CAAC;IAED,gDAAgD;IAChD,MAAM,EAAEa,GAAG,CAAA,EAAE,GAAGC,IAAAA,OAAS,EAAA,UAAA,EAAChC,WAAW,EAAE;QACrC,iFAAiF;QACjF,yEAAyE;QACzEiC,WAAW,EAAE,IAAI;KAClB,CAAC,AAAC;IAEH,qDAAqD;IACrD,OAAOtC,oBAAoB,CAACK,WAAW,EAAE;QACvC,GAAGH,OAAO;QACVS,cAAc;QACdV,QAAQ;QACRE,uBAAuB;QACvBoC,UAAU,EAAEH,GAAG,CAACG,UAAU;KAC3B,CAAC,CAAC;AACL,CAAC;AAGM,eAAevC,oBAAoB,CACxCK,WAAmB,EACnB,EACEJ,QAAQ,CAAA,EACRU,cAAc,CAAA,EACd4B,UAAU,CAAA,EACVpC,uBAAuB,CAAA,EACvB0B,GAAG,CAAA,EACHD,KAAK,CAAA,EACLY,GAAG,CAAA,EAmBJ,EACc;IACf,gDAAgD;IAChD,MAAMf,GAAG,GAAGgB,IAAAA,OAAc,EAAA,eAAA,EAACpC,WAAW,CAAC,AAAC;IAExC,kEAAkE;IAElE,MAAMqC,UAAU,GAAG,MAAMC,IAAAA,qBAAyB,0BAAA,EAACtC,WAAW,EAAE;QAC9DJ,QAAQ;QACR,wFAAwF;QACxFsC,UAAU;QACVd,GAAG;KACJ,CAAC,AAAC;IAEHL,IAAG,CAACD,GAAG,CACLyB,IAAAA,MAAK,EAAA,QAAA,CAAA,CAAC,kBAAkB,EACtBF,UAAU,CAACG,QAAQ,CAAClB,MAAM,GAAGe,UAAU,CAACG,QAAQ,CAACC,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE,CAC1E,YAAY,EAAEnC,cAAc,CAACoC,IAAI,CAAC,CAAC,CAAC,CACtC,CAAC;IAEF,IAAIL,UAAU,CAACM,qBAAqB,CAACrB,MAAM,EAAE;QAC3C,MAAMsB,eAAe,GAAGP,UAAU,CAACM,qBAAqB,CAACxB,MAAM,CAC7D,CAAC0B,MAAM,GAAKA,MAAM,CAACC,wBAAwB,CAC5C,AAAC;QACF,MAAMC,qBAAqB,GAAGV,UAAU,CAACM,qBAAqB,CAACxB,MAAM,CACnE,CAAC0B,MAAM,GAAK,CAACA,MAAM,CAACC,wBAAwB,CAC7C,AAAC;QAEF,IAAIF,eAAe,CAACtB,MAAM,EAAE;YAC1BP,IAAG,CAACD,GAAG,CACLyB,IAAAA,MAAK,EAAA,QAAA,CAAA,CAAC,aAAa,EAAES,IAAAA,QAAiB,kBAAA,EACpCJ,eAAe,CAACK,GAAG,CACjB,CAAC,EAAEC,oBAAoB,CAAA,EAAER,IAAI,CAAA,EAAES,gBAAgB,CAAA,EAAE,GAC/C,CAAC,EAAEA,gBAAgB,IAAI,QAAQ,CAAC,aAAa,EAAED,oBAAoB,CAAC,KAAK,EAAER,IAAI,CAAC,CAAC,CACpF,CACF,CAAC,SAAS,EACTE,eAAe,CAACtB,MAAM,GAAG,CAAC,GAAG,UAAU,GAAG,OAAO,CAClD,wDAAwD,EAAE8B,IAAAA,KAAS,UAAA,EAClE,wEAAwE,CACzE,CAAC,CAAC,CACJ,CAAC;QACJ,CAAC;QAED,IAAIL,qBAAqB,CAACzB,MAAM,EAAE;YAChCP,IAAG,CAACD,GAAG,CACLyB,IAAAA,MAAK,EAAA,QAAA,CAAA,CAAC,aAAa,EAAES,IAAAA,QAAiB,kBAAA,EACpCD,qBAAqB,CAACE,GAAG,CACvB,CAAC,EAAEC,oBAAoB,CAAA,EAAER,IAAI,CAAA,EAAES,gBAAgB,CAAA,EAAE,GAC/C,CAAC,EAAEA,gBAAgB,CAAC,YAAY,EAAED,oBAAoB,CAAC,KAAK,EAAER,IAAI,CAAC,CAAC,CACvE,CACF,CAAC,SAAS,EACTK,qBAAqB,CAACzB,MAAM,GAAG,CAAC,GAAG,gBAAgB,GAAG,cAAc,CACrE,wIAAwI,EAAE8B,IAAAA,KAAS,UAAA,EAClJ,wEAAwE,CACzE,CAAC,CAAC,CACJ,CAAC;QACJ,CAAC;IACH,CAAC;IAED,gEAAgE;IAChE,MAAMC,WAAW,GAAGpC,iBAAiB,CAACrB,QAAQ,EAAE,MAAM,CAAC,AAAC;IACxD,IAAIyD,WAAW,EAAE;QACf,MAAMC,kBAAkB,GAAG1D,QAAQ,CAACuB,MAAM,CAAC,CAACC,GAAG,GAAKA,GAAG,KAAKiC,WAAW,CAAC,AAAC;QAEzE,mCAAmC;QACnC,IAAI7B,GAAG,EAAE8B,kBAAkB,CAACC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1C,IAAIhC,KAAK,EAAE+B,kBAAkB,CAACC,IAAI,CAAC,SAAS,CAAC,CAAC;QAE9C,6EAA6E;QAC7E,OAAO,MAAMC,IAAAA,mBAAuB,wBAAA,EAACxD,WAAW,EAAE;YAChDM,cAAc;YACdR,uBAAuB;YACvB2D,oBAAoB,EAAEpB,UAAU,CAACzC,QAAQ,CAAC8D,IAAI,CAAC,CAACtC,GAAG,GAAKA,GAAG,CAACuC,UAAU,CAAC,OAAO,CAAC,CAAC;YAChFC,mBAAmB,EAAEN,kBAAkB;SACxC,CAAC,CAAC;IACL,CAAC;IAED,IAAInB,GAAG,EAAE;QACP,MAAM7B,cAAc,CAACuD,WAAW,CAAC;eAAI/D,uBAAuB;eAAKuC,UAAU,CAACzC,QAAQ;SAAC,CAAC,CAAC;IACzF,OAAO;QACL,MAAMU,cAAc,CAACwD,QAAQ,CAAC;eAAIhE,uBAAuB;eAAKuC,UAAU,CAACzC,QAAQ;SAAC,CAAC,CAAC;IACtF,CAAC;IAED,MAAMmE,IAAAA,aAAiB,kBAAA,EAAC/D,WAAW,EAAEqC,UAAU,CAACzC,QAAQ,CAAC,CAAC;AAC5D,CAAC;AAED,gGAAgG,GAChG,SAASqB,iBAAiB,CAACrB,QAAkB,EAAE8C,IAAY,EAAE;IAC3D,OAAO9C,QAAQ,CAAC8D,IAAI,CAAC,CAACtC,GAAG,GAAKA,GAAG,KAAKsB,IAAI,IAAItB,GAAG,CAACuC,UAAU,CAAC,CAAC,EAAEjB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC5E,CAAC;AAED,+DAA+D,GAC/D,SAASrB,iBAAiB,CAACqB,IAAI,GAAG,EAAE,EAAE;IACpC,OAAOA,IAAI,CAACsB,QAAQ,CAAC,GAAG,CAAC,CAAC;AAC5B,CAAC"}